# docker-compose.yaml

# Define common properties for Airflow services to avoid repetition (DRY principle).
x-airflow-common: &airflow-common
  build: .
  env_file:
    - ./airflow.env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    # Removed the './jobs' mount as Spark is no longer used.
    # The Astro SDK pushes compute to Snowflake.
    # Preserving custom volume mounts from your original file
    - ../CSVDump:/opt/airflow/CSVDump
    - ../data_lake:/opt/airflow/data_lake
  networks:
    - airflow_network
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  # Redis service for Celery broker
  redis:
    image: redis:7-alpine
    networks:
      - airflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # The Database for Airflow's metadata.
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  # This service handles all one-time initialization steps.
  airflow-init:
    <<: *airflow-common
    command: >
      bash -c "airflow db migrate"
    depends_on:
      postgres:
        condition: service_healthy

  # The Airflow Scheduler: Responsible for scheduling jobs and managing task dependencies.
  scheduler:
    <<: *airflow-common
    command: airflow scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # The Airflow Webserver: Provides the UI for monitoring and managing workflows.
  webserver:
    <<: *airflow-common
    command: airflow webserver
    ports:
      - "8080:8080"
    depends_on:
      scheduler:
        condition: service_started
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Define the custom network for all services to communicate.
networks:
  airflow_network:
    driver: bridge

# Define the named volume for persistent Postgres data.
volumes:
  postgres-db-volume:
